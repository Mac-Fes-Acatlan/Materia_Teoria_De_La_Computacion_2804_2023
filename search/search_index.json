{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Equipo_2/Planteamiento/","title":"Planteamiento del Problema","text":""},{"location":"Equipo_2/Planteamiento/#planteamiento","title":"Planteamiento","text":""},{"location":"Equipo_ejemplo/AFS/","title":"Biblioteca AFS","text":"Como se habia mencionado anteriormente esta biblioteca hace uso de la biblioteca pila, la manera en que lo hace es utilizando cada uno de los metodos que se mostraron anteriormente los cuales eran apilar,desapilar, el verificador de si una pila esta en la cima o si esta se encuentra vacia:  <pre><code>    class Autopi:\n        def __init__(self,palabra):\n            self.pila = pila.Pila()\n            self.resultado=[]\n            self.transiciones=[]\n            self.estado_1 = True\n            self.estado_2 = False\n            self.estado_final = False\n            self.palabra=palabra\n\n        def getEstado_1(self):\n            return self.estado_1\n        def getEstado_2(self):\n            return self.estado_2\n        def getEstado_final(self):\n            return self.estado_final\n\n        def activaEstado_1(self):\n            self.estado_1=True\n            self.estado_2=False\n            self.estado_final=False\n\n        def activaEstado_2(self):\n            self.estado_2=True\n            self.estado_1=False\n            self.estado_final=False\n\n        def activaEstado_final(self):\n            self.estado_final=True\n            self.estado_1=False\n            self.estado_2=False\n</code></pre>  En la siguiente parte del codigo se explica como se emplea la pila para dar seguimiento alas transiciones de b, asi mismo tambien en ese codigo se encuentran las transiciones de  a y de c, se utilizan los metodos de quitar es decir remover el ultimo elemento de la pila y luego si esta requiere alguna apilacion lo hace, para posteriormente verificar en que estamos:  <pre><code>    #transiciones con b\n    def b_b_bb(self):\n        self.pila.quitar()\n        self.pila.apilar('b')\n        self.pila.apilar('b')\n        self.activaEstado_1()\n\n    def b_a_ab(self):\n        self.pila.quitar()\n        self.pila.apilar('a')\n        self.pila.apilar('b')\n        self.activaEstado_1()\n    def b_n_nb(self):\n        self.pila.quitar()\n        self.pila.apilar('#')\n        self.pila.apilar('b')\n        self.activaEstado_1()\n</code></pre>"},{"location":"Equipo_ejemplo/Acerca_de/","title":"Acerca de","text":"<p>Creadores</p> <p>El PKC fue creado para la Teor\u00eda de la computaci\u00f3n de la FES Acatlan</p> <p>Ortiz Flores Diana Michelle</p> <p>Guerrero Bastida Juan Manuel</p> <p>Vazquez Mendez Jose Rodrigo</p> <p>Repositorio Git-Hub</p> <ul> <li>Version: 1.0.0 - 25/05/2022</li> </ul>"},{"location":"Equipo_ejemplo/Acerca_de/#lenguaje-de-desarrollo","title":"Lenguaje de desarrollo","text":"<ul> <li>Python</li> </ul>"},{"location":"Equipo_ejemplo/Acerca_de/#sistemas-operativos-con-compatibilidad","title":"Sistemas operativos con compatibilidad","text":"<ul> <li>Linux</li> <li>Windows</li> <li>MAC</li> </ul>"},{"location":"Equipo_ejemplo/Acerca_de/#proximas-implementaciones","title":"Pr\u00f3ximas implementaciones","text":"<ul> <li>Azure estatus:En pl\u00e1ticas</li> <li>AWS estatus:Ya solicit\u00f3 el sistema  </li> <li>IBM cloud:No contest\u00f3 la llamada</li> </ul>"},{"location":"Equipo_ejemplo/Codigo/","title":"Codigo principal","text":"La primera parte del programa importamos la biblioteca instrucciones que como se menciona en informacion sobre esta, es la que nos da el contexto generalizado sobre que es lo que pasa por detras, y con la biblioteca AFS que depende a su vez de la biblioteca pila la cual hace todos los cambios de apilamiento,sacar elementos, y asu vez verificar si una pila esta vacia o si se encuentra en la cima,una vez tenemos esto y que ya sabemos como funciona por detras, unimos todo en este codigo principal,importando primero nuestras bibliotecas AFS, e instrucciones , adicional a esto importamos la bilbioteca tkinter que no es otra cosa que una biblioteca para crear aplicaciones graficas:  <pre><code>import AFS\nimport instrucciones\n\nimport tkinter\nfrom tkinter import Label\nfrom tkinter import *\nfrom tkinter import ttk\n</code></pre>      Ahora vamos a crear una clase principal a esta se le cargaran diferentes funciones cada una de ellas es esencial para el programa:  <pre><code>class Principal:\n</code></pre>      Agrega a la ventana principal el texto y le da formato de visualizaci\u00f3n:  <pre><code>    def __init__(self,descripcion):\n            self.resultado=None\n            self.tran=None\n            self.descri=descripcion\n            self.ventana=tkinter.Tk()\n</code></pre>      La segunda funcion manda los resultados correspondientes al recuadro de operaciones y el recuadro de las transiciones del grafo :  <pre><code>    def cargar_resultado(self,listbox,listbox2):\n        for r in self.resultado:\n            listbox.insert(END,r)\n        for t in self.tran:\n            listbox2.insert(END, t))\n</code></pre>      La tercera funcion le da formato a los dos recuadros de resultados:  <pre><code>    def sgda_ventana(self):\n        segunda_ventana=tkinter.Toplevel(self.ventana)\n        segunda_ventana.title('Ventana de procedimiento')\n        segunda_ventana.minsize(width=600,height=500)\n\n        scrollbar = Scrollbar(segunda_ventana)\n        scrollbar.pack(side=RIGHT, fill=Y)\n\n        listbox = Listbox(segunda_ventana)\n        listbox.config( width=60, height=30,yscrollcommand=scrollbar.set,font=(\"Courier\", 10))\n        scrollbar.config(command=listbox.yview)\n\n\n        listbox['bg'] = 'black'\n        listbox['fg'] = \"#38EB5C\"\n\n        listbox2 = Listbox(segunda_ventana)\n        listbox2.config( width=40, height=30,yscrollcommand=scrollbar.set,font=(\"Courier\", 10))\n        listbox2['bg'] = 'black'\n        listbox2['fg'] = \"#38EB5C\"\n\n        self.cargar_resultado(listbox,listbox2)\n\n        listbox.pack(side=LEFT, fill=Y)\n        listbox2.pack()\n        self.ventana.iconify()\n</code></pre>      La cuarta funcion es la encargada de hacer las evaluaciones y ya es donde entra nuestra bilbioteca AFS que fue descrita anteriormente lo unico que pasa, es que se le pasan parametros a esta y activa los modulos que estan dentro de esta biblioteca para poder hacer las transciciones:  <pre><code>    def  evaluar(self):\n        auto=AFS.Autopi(self.text.get())\n        auto.validar()\n        self.resultado=auto.resultado\n        self.tran=auto.transiciones\n        self.sgda_ventana()\n</code></pre>      La quinta y ultima funcio es la que nos mantiene en la ventana principal se mantiene un loop para que esta jamas se cierre si no es con el boton de cerrado, y nos da gran ventaja para poder introducir mas datos tambien se cargan las imagenes y modelos a esta que es nuestra ventana principal:  <pre><code>def main(self):\n        self.ventana.title('Ventana principal')\n        img = PhotoImage(file=\"img.gif\")\n        widget = Label(self.ventana, image=img).pack()\n\n        plbra=tkinter.Entry(self.ventana)\n        plbra.pack()\n        self.text=plbra\n\n        boton = tkinter.Button(self.ventana, text=\"Validar\", command=self.evaluar, bg=\"#38EB5C\",relief=\"groove\")\n        boton['bg'] = 'black'\n        boton['fg'] = \"#38EB5C\"\n        boton.pack()\n\n\n        listbox = Listbox(self.ventana)\n        listbox.place(relwidth=1 ,relheight=-0.50)\n        listbox['bg'] = 'black'\n        listbox['fg'] = \"#38EB5C\"\n\n\n        for des in self.descri:\n            listbox.insert(END, des)\n\n        listbox.pack(fill=X, expand=1)\n\n        scrollbar = Scrollbar(self.ventana)\n        scrollbar.pack(side=RIGHT, fill=Y)\n\n        listbox.config(yscrollcommand=scrollbar.set , font=(\"Courier\", 14))\n        scrollbar.config(command=listbox.yview)\n\n        self.ventana.minsize(width=600,height=500)\n        self.ventana.mainloop()\n</code></pre>      Aqui primero llamamos a la biblioteca instrucciones para poder hacer el llenado de la ventana posteriormente en la main es donde empieza toda la magia que va por detras descrita en las bibliotecas AFS y Pila de las que depende enteramente todos los resultados y procesos:  <pre><code>des = instrucciones.des\np = Principal(des)\np.main()\n</code></pre>"},{"location":"Equipo_ejemplo/Ejemplo/","title":"Ejemplos del funcionamiento","text":"<p>Un pal\u00edndromo, tambi\u00e9n llamado pal\u00edndromo, pal\u00edndroma o palindroma, es una palabra o frase que se lee igual en un sentido que en otro.</p>      Ejemplo de entrada abca, recordemos que la c un tipo de separador que debemos recordar no esta presente en el prefijo que lo antecede, nos dira que no es palindromo,referenciandonos a la nota inferior sobre lo que es un palindromo:  <p></p>      Ejemplo de entrada acab, haremos un ejemplo contrario para visualizar es decir podemos ver que en el primer ejemplo del lado izquierdo era donde teniamos mas entradas ahora lo haremos para el caso del lado derecho:  <p></p>      Ejemplo de entrada abba, en este ejemplo se quiere demostrar que apesar de que podria considerarse una entrada que es palindroma no se pdora reconocer sin ese separador, propocionando dos salidas que por lo menos debe llevar alguna c para separ y que la clave no es palindroma:  <p></p>      Ejemplo de entrada aababcbabaa, en esta entrada se cumple con todas las condiciones que la clave sea palindroma, que lleve una c en medio, para poder separar el texto y hacer la verificacion y asu vez podemos comprar que es una llave palindroma :  <p></p>     Con esto demostramos se quiere ejemplicar el comportamiento del programar y demostrar su funcionamiento con cada uno de los posibles casos que surgan."},{"location":"Equipo_ejemplo/Instalacion/","title":"Instalacion","text":"<p>Repositorio Git-Hub - descarga</p> <ul> <li>Version: 1.0.0 - 25/05/2022</li> </ul>"},{"location":"Equipo_ejemplo/Instalacion/#de-un-sitio-alojado-en-git-hub-adjuntado-al-final-de-este-documento-descargamos-en-formato-zip-y-descomprimimos-en-una-sola-carpeta-ahi-mismo-puedes-ver-las-bibliotecas-creadas","title":"De un sitio alojado en git-hub adjuntado al final de este documento descargamos en formato zip y descomprimimos en una sola carpeta ahi mismo puedes ver las bibliotecas creadas:","text":""},{"location":"Equipo_ejemplo/Instalacion/#una-vez-descargados-los-archivos-de-github-en-una-sola-carpeta-como-la-siguiente","title":"Una vez descargados los archivos de github en una sola carpeta como la siguiente:","text":""},{"location":"Equipo_ejemplo/Instalacion/#abrira-su-entorno-de-programacion-favorito-que-acepte-python-por-ejemplo","title":"Abrira su entorno de programacion favorito que acepte python por ejemplo:","text":""},{"location":"Equipo_ejemplo/Instalacion/#una-vez-abierto-el-entorno-arrastrara-el-archivo-de-proyecto-dentro-del-entorno","title":"Una vez abierto el entorno, arrastrara el archivo de proyecto dentro del entorno:","text":""},{"location":"Equipo_ejemplo/Instalacion/#corremos-el-codigo-y-nos-arroja-la-siguiente-ventana","title":"Corremos el codigo y nos arroja la siguiente ventana:","text":""},{"location":"Equipo_ejemplo/Instalacion/#a-fines-practicos-aplicamos-un-metodo-de-seguridad-es-decir-parece-que-la-ventana-no-hace-nada-pero-para-poder-vizualizar-el-programa-debemos-abrir-en-pantalla-completa-el-programa","title":"A fines practicos aplicamos un metodo de seguridad es decir parece que la ventana no hace nada, pero para poder vizualizar el programa, debemos abrir en pantalla completa el programa:","text":""},{"location":"Equipo_ejemplo/Instalacion/#una-ves-echo-este-paso-podemos-regresar-a-la-pantalla-tamano-normal-para-mayor-experiencia-de-usuario-no-vendemos-un-producto-vendemos-una-experiencia-ingresa-su-cadena-que-desea-validar","title":"Una ves echo este paso podemos regresar a la pantalla tama\u00f1o normal para mayor experiencia de usuario (no vendemos un producto, vendemos una experiencia). Ingresa su cadena que desea validar:","text":""},{"location":"Equipo_ejemplo/Instalacion/#si-es-una-cadena-valida-en-tamano-impar-y-estructura-sera-un-resultado-correcto","title":"Si es una cadena valida en tama\u00f1o impar y estructura, sera un resultado correcto:","text":""},{"location":"Equipo_ejemplo/Instalacion/#de-lo-contrario-si-es-una-cadena-no-palindroma-se-lanzara-un-mensaje-de-invalido-este-metodo-necesita-de-una-c-para-poder-utilizarlo-segun-nuestro-modelo-de-automata-en-caso-de-no-contenerla-nos-arroja-un-mensaje-de-error-primero-mostraremos-la-entrada","title":"De lo contrario si es una cadena no palindroma se lanzara un mensaje de invalido, este metodo necesita de una C para poder utilizarlo segun nuestro modelo de automata, en caso de no contenerla nos arroja un mensaje de error primero mostraremos la entrada:","text":""},{"location":"Equipo_ejemplo/Instalacion/#y-aqui-podemos-ver-el-error-que-arroja","title":"Y aqui podemos ver el error que arroja:","text":""},{"location":"Equipo_ejemplo/Instrucciones/","title":"Biblioteca Instrucciones","text":"Esta biblioteca acompa\u00f1ara a nuestro ejemplo de uso y nos mostrara un mensaje en la pantalla para ser mas exactos nos creara el contexto de manera texual sobre lo que se esta haciendo de manera grafica:  <p><pre><code>        des=[]\n        lin='Descripcion: Este es el PKC, funciona con un automata de de pila,'\n        lin1='          tiene la funcionalidad de reconocer un palindromo de largo'\n        lin2='          impar, donde el caracter del centro es una C es un separador'\n        lin3='          que no esta presente en el prefijo que lo antecede. Esto '\n        lin4='          quiere decir que la cadena a ser aceptada puede ser de '\n        lin5='          la forma \u00a8ZcZ\u00a8 donde Z pertenece a {a, b}*'\n        lin6='          Esto siendo P el estado 1, Q el estado 2 y R el estado final'\n        lin7='          Algunos ejemplos son \u00a8aacaa\u00a8,\u00a8aabbcbbaa\u00a8,\u00a8abbaabacabaabba\u00a8'\n\n\n        des.append(lin)\n        des.append(lin1)\n        des.append(lin2)\n        des.append(lin3)\n        des.append(lin4)\n        des.append(lin5)\n        des.append('   ')\n        des.append(lin6)\n        des.append(lin7)\n</code></pre> </p>"},{"location":"Equipo_ejemplo/Pila/","title":"Biblioteca Pila","text":"Esta biblioteca sera complemento de la biblioteca AFS se explica a continuacion el codigo de esta y posteriormente se explicara cada uno de los metodos:  <pre><code>class Pila:\n    def __init__(self):\n        self.pila= []\n        self.pila.append('#')\n\n    def apilar(self, x):\n        self.pila.append(x)\n\n    def quitar(self):\n        if(self.vacia()):\n            print('la pila esta vacia')\n        else:\n            return self.pila.pop()\n\n    def cima(self):\n        return self.pila[len(self.pila)-1]\n\n    def vacia(self):\n        if (self.pila == []):\n            return True\n        else:\n            return False\n</code></pre>"},{"location":"Equipo_ejemplo/Pila/#apilar","title":"Apilar","text":"En este fragmento del codigo es en el unico que tenemos dos parametros el de nuestra pila que es el primero, y el segundo es el valor x, gracias al metodo append podemos agregar un elemento al final de una pila, por consiguiente recibe el funcionamiento es el siguiente recibe la pila y al final de esta agrega un elemento :  <pre><code> def apilar(self, x):\n        self.pila.append(x)\n</code></pre>"},{"location":"Equipo_ejemplo/Pila/#quitar-o-desapilar","title":"Quitar o desapilar","text":"En este fragmento de codigo pasa lo siguiente recibe de parametro nuestra pila si esta se encuentra vacia nos arrojara un mensaje de la pila esta vacia en caso de que esta contenga algun elemento eliminara o retornara un elemento de esta pila en dado caso de no especificar el indice que sale por defecto retorna el ultimo elemento de la pila:  <pre><code>def quitar(self):\n        if(self.vacia()):\n            print('la pila esta vacia')\n        else:\n            return self.pila.pop()\n</code></pre>"},{"location":"Equipo_ejemplo/Pila/#cima","title":"Cima","text":"En este fragmento de codigo vamos a retornar un valor la cima para esto pasamos el parametro de la pila dentro de la pila tomamos el valor de esta menos recordando que normalmente los vectores inician en cero por lo cual hay un elemento que se cuenta de m\u00e1s:  <pre><code>def cima(self):\n        return self.pila[len(self.pila)-1]\n</code></pre>"},{"location":"Equipo_ejemplo/Pila/#vacia","title":"Vacia","text":"En este fragmento del codigo se hacen 2 cosas primero comprobamos si la pila es vacia si es el caso nos retornada un verdadero, de caso contrario retornara un falso:  <pre><code>def vacia(self):\n        if (self.pila == []):\n            return True\n        else:\n            return False\n</code></pre>"},{"location":"Equipo_ejemplo/Pila/#notas-sobre-init-y-self","title":"Notas sobre init y self","text":"<p>\u00bfQue es Self?</p> <p>Hace referencia al nombre del objeto en el que se encuentra escrito. Lo podr\u00edas reemplazar por el nombre de la clase</p> <p>\u00bfQue es init?</p> <p>Sirve para inicializar valores de ciertas variables, es decir, los de los atributos. por lo que de este modo, siempre tendr\u00e1s una serie de valores asignados por defecto al instanciar un objeto.</p>"},{"location":"Equipo_ejemplo/Planteamiento/","title":"Verificador de llaves palindromas o Palindrome keys check (PKC)","text":""},{"location":"Equipo_ejemplo/Planteamiento/#descripcion","title":"Descripcion:","text":"Se prente crear un verificador de llaves palindromas esto nos va servir para reconocer si una cadena de entrada es reconocida por la maquina, el proposito es demostrar como a base de un automata podemos verificar si existe un texto palindromo y que tan decifrable seria este si se le intentara hacer criptoanalisis.  <p>\u00bfQue es el el PKC?</p> <p>El PKC es un sistema de c\u00f3digo abierto que le permite a la organizaci\u00f3n/usuario verificar si la llave con la que est\u00e1 encriptando es un pal\u00edndromo, esto se podr\u00eda hacer de forma manual (forma aburrida) o bien mediante el sistema PKC (forma chida) ya que este implementa un aut\u00f3mata finito de pila (AFS) para identificar si la llave ingresada es correcta o no.</p> <p>Retrospectivamente se ha usado la criptograf\u00eda palindroma desde el cambio del sentido del alfabeto alineando la m\u00e9trica a darle otra  interpretaci\u00f2n con la simetr\u00eda para componer instrucciones secretas para aquellos que desconozcan esta forma de encriptar de manera que pueda enviar frases aparentemente sin sentido para resguardar informaci\u00f2n en clave.</p> <p>Usos</p> <p> </p> <p>Ventajas y desventajas</p> <ul> <li> <p>La primera ventaja de utilizar el PKC es que no necesitas perder tiempo verificando si tu llave en palindroma o no.</p> </li> <li> <p>Es mas cool encriptar con palindromos y no con numeros primos ademas quien quiere utilizar un sistema super complejo y desarrollado que cuesta muchisimo dinero para crear n\u00fameros primos gigantescos, es mejor crear tu propia llave palindroma y utilizar tu super divertido sistema de PKC.</p> </li> <li> <p>Instalaci\u00f3n sencilla y r\u00e1pida.</p> </li> <li> <p>Adem\u00e1s de contar con un dise\u00f1o f\u00e1cil de verificar su contrase\u00f1a e intuitivo.</p> </li> <li> <p>La desventaja de utilizar el PKC es que ser\u00e1s la envidia del mercado.</p> </li> </ul> <p>Repositorio Git-Hub</p> <ul> <li>Version: 1.0.0 - 25/05/2022</li> </ul>"},{"location":"Equipo_ejemplo/esquema/","title":"Esquema de funcionamiento","text":"El siguiente esquema es para ense\u00f1ar como funciona por detras nuestro programa de una manera mas entendible, apartir de un grafico y en la parte inferior se describen los pasos de este:  <pre><code>Inicio\n\nIngresa la cadena\n\nHace recorrido para a\n\nHace recorrido para b\n\nV\u00e1lida si existe c\n\nNo: Escribir \u201cLas claves del lenguaje deben llevar al menos una C en la mitad de la cadena\u201d\n\nFin del sistema\n\nSi:Hace recorrido para c\n\nEval\u00faa si todos  los caracteres son v\u00e1lidos\n\nNo: Escribir \u201cEl caracter es inv\u00e1lido en el lenguaje\u201d\n\nFin del sistema\n\nSi: Escribe \u201cpalabra terminada\u201d\n\nValidar si es un palindromo\n\nNo: Escribir \u201cLa clave no es palindroma\u201d\n\nFin del sistema\n\nSi: Escribir \u201c La clave es palindroma\u201d\n\nFin del sistema\n</code></pre>"}]}